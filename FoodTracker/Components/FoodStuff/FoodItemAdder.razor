@* Usings *@
@using Scripts.DataBase;

@* Injects *@
@inject DBManager dbManager

<header>
    Add Food Item
</header>
<content>
    <form method="post" @onsubmit="Add" @formname="Add-New-FoodItem">
        <AntiforgeryToken />
        <div class="formInputs">
            <label>
                <div>Name:</div>
                <InputText class="InputText" @bind-Value="_foodItemToAdd.Name"></InputText>
            </label>
            <label>
                Calories:
                <InputNumber class="InputNumber" @bind-Value="_foodItemToAdd!.Calories"></InputNumber>
            </label>
            <label>
                Protein:
                <InputNumber class="InputNumber" @bind-Value="_foodItemToAdd!.Protein"></InputNumber>
            </label>
            <label>
                Carbs:
                <InputNumber class="InputNumber" @bind-Value="_foodItemToAdd!.Carbs"></InputNumber>
            </label>
            <label>
                Fat:
                <InputNumber class="InputNumber" @bind-Value="_foodItemToAdd!.Fat"></InputNumber>
            </label>
        </div>
        <div>
            <button class="Test" type="submit">Add</button>
            <button class="btn-danger">Test</button>
        </div>
    </form>

    <div>
        <FoodTracker.Components.UserFeedback.MessageDisplayer messages="_lastAddStatus.messages" ClearStatus="ClearStatus" />
    </div>
</content>




@code {
    [Parameter] public Action OnAddComplete { get; set; } = () => { };

    private (bool success, List<string> messages) _lastAddStatus = (false, new List<string>());
    private MongoFoodItem _foodItemToAdd { get; set; } = new MongoFoodItem();

    private void Add()
    {
        _foodItemToAdd.Id = new();
        _lastAddStatus = dbManager.TryInsertFoodItem(_foodItemToAdd);

        OnAddComplete();
    }

    private void ClearStatus()
    {
        _lastAddStatus = (false, new List<string>());
    }
}
