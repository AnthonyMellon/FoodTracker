@page "/FoodTrackerPage"
@rendermode InteractiveServer

@* Usings *@
@using global::FoodTracker.Scripts
@using global::FoodTracker.Scripts.DataBase
@using global::FoodTracker.Scripts.Utils
@using MongoDB.Bson
@using FoodTracker.Components.Utils
@using FoodTracker.Components.FoodStuff

@* Injects *@
@inject DBManager dbManager

<link href="./Styles/FoodTracker.css" rel="stylesheet"/>

<PageTitle>Foood Tracker</PageTitle>

<h3>Welcome to your food tracker</h3>

<ItemSelector Items="@_selectableFoodItems" AddItem="@AddSelectedFood" />
<FoodItemLister foodItems="_selectedFoodItems" />
<div>
    <label>Totals</label>
    <TotalMacroDisplayer FoodItems="_selectedFoodItems" />
</div>

@code
{
    public string? selectedFood { get; private set; }
    private List<FoodItem> _allFoodItems = new List<FoodItem>();
    private List<FoodItem> _selectedFoodItems = new List<FoodItem>();
    private List<SelectableMongoItem> _selectableFoodItems = new List<SelectableMongoItem>();

    private void AddSelectedFood(string selected)
    {
        //Find and add the selected food item
        FoodItem? selectedItem = (_allFoodItems.Find(e => e.Id.ToString() == selected));
        if (selectedItem != null) _selectedFoodItems.Add(selectedItem);
    }

    private async void LoadFoodItems()
    {
        _allFoodItems = await dbManager.FoodItemManager.GetAllFoodItems();
        _selectableFoodItems = _allFoodItems.Select(i => new SelectableMongoItem(i.Id, i.Name)).ToList();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(1);
        LoadFoodItems();
    }
}