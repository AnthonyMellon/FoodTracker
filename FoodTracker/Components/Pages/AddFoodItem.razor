@page "/AddFoodItem"
@rendermode InteractiveServer

@* Usings *@
@using Scripts.DataBase

@* Injects *@
@inject DBManager dbManager

<PageTitle> Create Food Item </PageTitle>

<h3>Modify Food Items</h3>

@* Add a food item *@
<form method="post" @onsubmit="SubmitFoodItem" @formname="create-new-foodItem">
    <AntiforgeryToken />
    <div>
        <label>
            Name:
            <InputText @bind-Value="_foodItemToAdd!.Name"></InputText>
        </label>
        <label>
            Calories:
            <InputNumber @bind-Value="_foodItemToAdd!.Calories"></InputNumber>
        </label>
        <label>
            Protein:
            <InputNumber @bind-Value="_foodItemToAdd!.Protein"></InputNumber>
        </label>
        <label>
            Carbs:
            <InputNumber @bind-Value="_foodItemToAdd!.Carbs"></InputNumber>
        </label>
        <label>
            Fat:
            <InputNumber @bind-Value="_foodItemToAdd!.Fat"></InputNumber>
        </label>
    </div>
    <div>
        <button type="submit">Add</button>
    </div>
</form>

@* Edit food items *@
<button onclick=@(() => {_allowDeletes = !_allowDeletes;})>Allow deletes: @_allowDeletes</button>

@if(_foodItems != null)
{
    foreach (MongoFoodItem foodItem in _foodItems)
    {
        string formName = $"edit-food-{foodItem.Id}";
        <form method="post" @onsubmit=@(() => {EditFoodItem(foodItem);}) @formname=@formName>

            @* Edit Item *@
            <InputText @bind-Value="foodItem.Name"></InputText>
            <InputNumber @bind-Value="foodItem.Calories"></InputNumber>
            <InputNumber @bind-Value="foodItem.Protein"></InputNumber>
            <InputNumber @bind-Value="foodItem.Carbs"></InputNumber>
            <InputNumber @bind-Value="foodItem.Fat"></InputNumber>
            
            <button type="submit">Save Changes</button>

            @* Delete Item *@
            @if(_allowDeletes)
            {
                <button @onclick=@(() => {DeleteFoodItem(foodItem.Id);})>Delete Food Item</button>
            }

        </form>
    }
}

@* Display status of last action *@
<div>
    @if(_insertStatus?.messages != null)
    {
        foreach (string message in _insertStatus?.messages)
        {
            <div>@message</div>
        }
        <button onclick="@ClearInsertStatus">Got it!</button>
    }

</div>

@code {
    [SupplyParameterFromForm]
    private MongoFoodItem? _foodItemToAdd { get; set; } = new MongoFoodItem();
    private List<MongoFoodItem>? _foodItems = new List<MongoFoodItem>();

    private (bool success, List<string> messages)? _insertStatus;

    private bool _allowDeletes = false;

    private async void SubmitFoodItem()
    {
        if (_foodItemToAdd == null) return;

        _foodItemToAdd.Id = new();
        _insertStatus = dbManager.TryInsertFoodItem(_foodItemToAdd);

        await LoadFoodItems();
    }

    private void EditFoodItem(MongoFoodItem foodItem)
    {
        _insertStatus = dbManager.TryUpdateFoodItem(foodItem);
    }

    private void DeleteFoodItem(MongoDB.Bson.ObjectId id) //Implement me
    {
        Console.WriteLine($"(Not implemented) Deleting {id}");
    }

    private void ClearInsertStatus()
    {
        _insertStatus = null;
    }

    Task LoadFoodItemsTask()
    {
        _foodItems?.Clear();
        _foodItems = dbManager.GetAllFoodItems();
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFoodItems();
    }

    private async Task LoadFoodItems()
    {
        await LoadFoodItemsTask();
    }
}
