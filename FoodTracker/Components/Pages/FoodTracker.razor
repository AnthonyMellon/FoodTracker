@page "/FoodTracker"
@rendermode InteractiveServer

@* Usings *@
@using global::FoodTracker.Scripts
@using global::FoodTracker.Scripts.DataBase
@using global::FoodTracker.Scripts.Utils

@* Injects *@
@inject DBManager dbManager

<link href="./Styles/FoodTracker.css" rel="stylesheet"/>

<PageTitle>Foood Tracker</PageTitle>

<h3>Welcome to your food tracker</h3>

<!-- Add food items to the list -->
<InputSelect @bind-Value:get="selectedFood" @bind-Value:set="SetSelectedFood">
    <option value="" disabled selected>Add an item</option>
    @foreach (FoodItem foodItem in SelectableFoodItems)
    {
        <option value="@foodItem.name">@foodItem</option>
    }
</InputSelect>

<!-- List each food item added to the list -->
@foreach (FoodItem foodItem in selectedFoodItems)
{  
    <div>
        <label>>@foodItem</label>
        <div>Calories: @foodItem.calories</div>
        <div>Protein: @foodItem.protein.value@FoodUtils.MacroToUnitAbbv(Macros.Protein)</div>
        <div>Carbs: @foodItem.carbs.value@FoodUtils.MacroToUnitAbbv(Macros.Carb)</div>
        <div>Fat: @foodItem.fat.value@FoodUtils.MacroToUnitAbbv(Macros.Fat)</div>
    </div>
    <hr />
}

<!-- Disaply totals -->
<div>
    <label>Totals</label>
    <div>Calroies: @selectedFoodItems.Sum(i => i.calories)</div>
    <div>Protein: @selectedFoodItems.Sum(i => i.protein.value)@FoodUtils.MacroToUnitAbbv(Macros.Protein)</div>
    <div>Carbs: @selectedFoodItems.Sum(i => i.carbs.value)@FoodUtils.MacroToUnitAbbv(Macros.Carb)</div>
    <div>Fat: @selectedFoodItems.Sum(i => i.fat.value)@FoodUtils.MacroToUnitAbbv(Macros.Fat)</div>
</div>

@code
{
    public string? selectedFood { get; private set; }
    private List<FoodItem> selectedFoodItems = new List<FoodItem>();
    private List<FoodItem> SelectableFoodItems = new List<FoodItem>();

    private void SetSelectedFood(string? selected)
    {
        if (selected == null) return;

        //Find and add the selected food item
        FoodItem? selectedItem = (SelectableFoodItems.Find(e => e.name == selected));
        if (selectedItem != null) selectedFoodItems.Add(selectedItem);        
    }

    Task LoadSelectableFoodItems()
    {
        SelectableFoodItems.Clear();

        List<MongoFoodItem>? mongoFoodItems = dbManager.GetAllFoodItems();        

        if(mongoFoodItems != null)
        {
            foreach (MongoFoodItem foodItem in mongoFoodItems) //Convert all the mongoFoodItems to foodItems
            {
                SelectableFoodItems.Add(new FoodItem(
                    foodItem.Name,
                    (float)foodItem.Calories,
                    (float)foodItem.Protein,
                    (float)foodItem.Carbs,
                    (float)foodItem.Fat
            ));}
        }

        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadSelectableFoodItems();
    }
}